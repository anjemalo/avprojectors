/*
 * AVProjectorView.java
 */

package avprojector;

import avprojector.controller.AVProjectorTableModel;
import avprojector.controller.AVProjectorController;
import java.awt.BorderLayout;
import java.awt.Button;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultCellEditor;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 * The application's main frame.
 */
public class AVProjectorView extends FrameView {

    public AVProjectorView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        statusAnimationLabel.setVisible(false);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });

        // MY CODE STARTS HERE

        // initialize the controller
        AVProjectorController.Initialize();
        mProjTable.setModel(avprojector.controller.AVProjectorController.sProjTableModel);
        FormatProjTable();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = AVProjectorApp.getApplication().getMainFrame();
            aboutBox = new AVProjectorAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        AVProjectorApp.getApplication().show(aboutBox);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mMainPanel = new javax.swing.JPanel();
        mScrollPane = new javax.swing.JScrollPane();
        mProjTable = new javax.swing.JTable();
        mMenuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem mExitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        mStatusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();

        mMainPanel.setName("mMainPanel"); // NOI18N

        mScrollPane.setName("mScrollPanel"); // NOI18N

        mProjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        mProjTable.setName("mProjTable"); // NOI18N
        mProjTable.setShowGrid(false);
        mScrollPane.setViewportView(mProjTable);

        org.jdesktop.layout.GroupLayout mMainPanelLayout = new org.jdesktop.layout.GroupLayout(mMainPanel);
        mMainPanel.setLayout(mMainPanelLayout);
        mMainPanelLayout.setHorizontalGroup(
            mMainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
                .addContainerGap())
        );
        mMainPanelLayout.setVerticalGroup(
            mMainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addContainerGap())
        );

        mMenuBar.setName("mMenuBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(avprojector.AVProjectorApp.class).getContext().getResourceMap(AVProjectorView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(avprojector.AVProjectorApp.class).getContext().getActionMap(AVProjectorView.class, this);
        mExitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        mExitMenuItem.setName("mExitMenuItem"); // NOI18N
        fileMenu.add(mExitMenuItem);

        mMenuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        mMenuBar.add(helpMenu);

        mStatusPanel.setName("mStatusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        jButton1.setAction(actionMap.get("CheckAllStatus")); // NOI18N
        jButton1.setBackground(resourceMap.getColor("jButton1.background")); // NOI18N
        jButton1.setForeground(resourceMap.getColor("jButton1.foreground")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.setName("jButton1"); // NOI18N

        org.jdesktop.layout.GroupLayout mStatusPanelLayout = new org.jdesktop.layout.GroupLayout(mStatusPanel);
        mStatusPanel.setLayout(mStatusPanelLayout);
        mStatusPanelLayout.setHorizontalGroup(
            mStatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mStatusPanelLayout.createSequentialGroup()
                .add(mStatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mStatusPanelLayout.createSequentialGroup()
                        .add(mStatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                            .add(mStatusPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .add(statusMessageLabel)))
                        .add(363, 363, 363)
                        .add(statusAnimationLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, mStatusPanelLayout.createSequentialGroup()
                        .addContainerGap(672, Short.MAX_VALUE)
                        .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        mStatusPanelLayout.setVerticalGroup(
            mStatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mStatusPanelLayout.createSequentialGroup()
                .add(mStatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mStatusPanelLayout.createSequentialGroup()
                        .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 38, Short.MAX_VALUE)
                        .add(mStatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(statusMessageLabel)
                            .add(statusAnimationLabel))
                        .add(18, 18, 18))
                    .add(mStatusPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jButton1)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setComponent(mMainPanel);
        setMenuBar(mMenuBar);
        setStatusBar(mStatusPanel);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel mMainPanel;
    private javax.swing.JMenuBar mMenuBar;
    private javax.swing.JTable mProjTable;
    private javax.swing.JScrollPane mScrollPane;
    private javax.swing.JPanel mStatusPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
    private JDialog mOpenFileDialog;

    @Action
    public void PopulateProjTable( )
    {
        AVProjectorController.Parse();
        AVProjectorTableModel projModel = new AVProjectorTableModel();


        mProjTable.setModel(projModel);
    }

    public final void FormatProjTable( )
    {

        TableColumn powerColumn = mProjTable.getColumnModel().getColumn( 1 ); // power status
        TableColumn inputColumn = mProjTable.getColumnModel().getColumn( 2 ); // input status
        powerColumn.setCellRenderer(new ButtonCellRenderer(mProjTable));

        DefaultCellEditor inputEditor = new DefaultCellEditor(new JComboBox(AVProjectorTableModel.inputColumnValues));

        inputColumn.setCellEditor( inputEditor ); 

    }

    @Action
    public void CheckAllStatus()
    {
        AVProjectorController.CheckAllStatus();

    }


}
